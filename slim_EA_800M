//定义基本参数，突变率，重组率，取样数，总基因数

initialize(){
	initializeMutationRate(4.8e-9);
	defineConstant("r",1.9e-8);
    defineConstant("g",11428);  
    defineConstant("gr",1500);
    defineConstant("ir",68500);
    defineConstant("or",70000);      
	defineConstant("sampleSize", 12);
	defineConstant("seqLength", 800000000);


//不同程度的有害突变的显性系数不同，进行定义，参照人类的标准
	defineConstant("h_VstrDel", 0.0);
	defineConstant("h_strDel", 0.01);
	defineConstant("h_modDel", 0.1);
	defineConstant("h_wkDel", 0.4);

//定义不同程度的突变

	initializeMutationType("m1", h_VstrDel, "s", "do x=rgamma(1,-0.0206,0.1977); while (x >= -0.1); return x;");

	initializeMutationType("m2", h_strDel, "s", "do x=rgamma(1,-0.0206,0.1977); while (x < -0.1 | x >= -0.01); return x;");

	initializeMutationType("m3", h_modDel, "s", "do x=rgamma(1,-0.0206,0.1977); while (x < -0.01 | x >= -0.001); return x;");

	initializeMutationType("m4", h_wkDel, "s", "do x=rgamma(1,-0.0206,0.1977); while (x < -0.001); return x;");

	initializeMutationType("m5", 0.5,"f",0.0);
//生成不同的基因组区域，其中g1为受选择区域，g2为基因间区
	initializeGenomicElementType("g1", c(m1,m2,m3,m4,m5), c(5.8, 25.8, 26.4, 15.6, 26.4));
	initializeGenomicElementType("g2", m5, 1);

//多个基因间区与基因交替
    for (i in 1:g){
        initializeGenomicElement(g1, ((i-1)*or), ((i-1)*or)-1+gr );
        initializeGenomicElement(g2, ((i-1)*or)+gr, (i*or)-1 );
    } 

    initializeRecombinationRate(r);

}




//第一部分：进行burn-in，以祖先种群大小进行10Ne代数的Ne


1 early() {
	sim.addSubpop("p1",600);
	cat("gen,popSizeP1,meanFitnessP1,meanHetP1,B,FROH_100kbP1,FROH_500kbP1,FROH_1MbP1,FROH_10MbP1,avgvStrDelP1,avgStrDelP1,avgModDelP1,avgWkDelP1,avgNeutP1,avgvStrDelHet,avgvStrDelHom,avgStrDelHet,avgStrDelHom,avgmodDelHet,avgmodDelHom,avgwkDelHet,avgwkDelHom,avgneutHet,avgneutHom" + "\n");
	m1.convertToSubstitution = T;
	m2.convertToSubstitution = T;
	m3.convertToSubstitution = T;
	m4.convertToSubstitution = T;
    m5.convertToSubstitution = T;
}

1:6000 early() {
	if (sim.cycle % 100 == 0){
		stats = getStats(p1, sampleSize);
		cat(sim.cycle + "," + p1.individuals.size() + "," + stats + "\n");
	}
}

//根据gone结果200代前开始模拟。
//第二部分，对最近200代每代都进行统计
6000 early(){
	m1.convertToSubstitution = F;
	m2.convertToSubstitution = F;
	m3.convertToSubstitution = F;
	m4.convertToSubstitution = F;
    m5.convertToSubstitution = T;
}

6000:6300 early() {

    stats = getStats(p1, sampleSize);
    cat(sim.cycle + "," + p1.individuals.size() + "," + stats + "\n");
}

//根据gone的结果，每10代取一次种群大小

6000 early() {
    p1.setSubpopulationSize(10125);
}

6010 early() {
    p1.setSubpopulationSize(9109);
}

6020 early() {
    p1.setSubpopulationSize(9053);
}

6030 early() {
    p1.setSubpopulationSize(8247);
}

6040 early() {
    p1.setSubpopulationSize(8760);
}

6050 early() {
    p1.setSubpopulationSize(8163);
}

6060 early() {
    p1.setSubpopulationSize(7994);
}

6070 early() {
    p1.setSubpopulationSize(8476);
}

6080 early() {
    p1.setSubpopulationSize(10240);
}

6090 early() {
    p1.setSubpopulationSize(11361);
}

6100 early() {
    p1.setSubpopulationSize(12610);
}

6110 early() {
    p1.setSubpopulationSize(13341);
}

6120 early() {
    p1.setSubpopulationSize(15802);
}

6130 early() {
    p1.setSubpopulationSize(18869);
}

6140 early() {
    p1.setSubpopulationSize(22115);
}

6150 early() {
    p1.setSubpopulationSize(23467);
}

6160 early() {
    p1.setSubpopulationSize(25100);
}

6170 early() {
    p1.setSubpopulationSize(24359);
}

6180 early() {
    p1.setSubpopulationSize(19724);
}

6190 early() {
    p1.setSubpopulationSize(560);
}
6190 early() {
    p1.setSubpopulationSize(560);
}
6191 early() {
    p1.setSubpopulationSize(551);
}
6192 early() {
    p1.setSubpopulationSize(809);
}

6193 early() {
    p1.setSubpopulationSize(1017);
}
6194 early() {
    p1.setSubpopulationSize(1975);
}
6195 early() {
    p1.setSubpopulationSize(11598);
}
6196 early() {
    p1.setSubpopulationSize(11598);
}

6300 early() {
	sim.simulationFinished();
}


//定义取样的时候进行哪些操作
function (s) getStats(o pop, i sampSize)
{
	i = sample(pop.individuals, sampSize, F);
	
	m = sortBy(i.genomes.mutations, "position"); //get all mutations in sample
	m_uniq = unique(m); // get rid of redundant muts
	DAF = sapply(m_uniq, "sum(m == applyValue);"); // count number of each mut in pop
	m_uniq_polym = m_uniq[DAF != i.genomes.size()]; //remove fixed mutations??
	
	//initialize vectors
	ROH_length_sumPerInd_10Mb = c();
	ROH_length_sumPerInd_1Mb = c();
	ROH_length_sumPerInd_500Kb = c();
    ROH_length_sumPerInd_100Kb = c();
	Num_vStrDel_muts = c();
	Num_strDel_muts = c();
	Num_modDel_muts = c();
	Num_wkDel_muts = c();
	Num_neut_muts = c();
	Num_vStrDel_muts_het = c();
	Num_vStrDel_muts_hom = c();
	Num_StrDel_muts_het = c();
	Num_StrDel_muts_hom = c();
	Num_modDel_muts_het = c();
	Num_modDel_muts_hom = c();
	Num_wkDel_muts_het = c();
	Num_wkDel_muts_hom = c();
	Num_neut_muts_het = c();
	Num_neut_muts_hom = c();
	ind_het = c();
	B_pop = c();
	
	for (individual in i) {
		
		indm = sortBy(individual.genomes.mutations, "position");
		indm = indm[match(indm, m_uniq_polym) >= 0];   // Check that individual mutations are not fixed 
		indm_uniq = unique(indm);
		
		genotype = sapply(indm_uniq, "sum(indm == applyValue);");
		
		// tally number of mutations for different classes of selection coefficient per individual
		s = individual.genomes.mutations.selectionCoeff;
		
		Num_vStrDel_muts = c(Num_vStrDel_muts, sum(s<=-0.1));
		Num_strDel_muts = c(Num_strDel_muts, sum(s<=-0.01));
		Num_modDel_muts = c(Num_modDel_muts, sum(s<=-0.001 & s > -0.01));
		Num_wkDel_muts = c(Num_wkDel_muts, sum(s<=-0.00001 & s > -0.001));
		Num_neut_muts = c(Num_neut_muts, sum(s==0.0));

		if (isNULL(genotype)) {
			ind_het = c(ind_het, 0); //putting this here to avoid error when trying to sum null vector
			next;
		}
		
		ind_het = c(ind_het, sum(genotype==1)/(seqLength));
		
		//code for getting ROHs 
		
		ID_het = (genotype == 1); //outputs T/F for genotypes if they are het or homDer
		ID_homDer = (genotype == 2);
		pos_het = indm_uniq.position[ID_het]; //outputs positions of heterozgoys genotypes
		vStrDel_het= 0;
		strDel_het=0;
		modDel_het=0;
		wkDel_het =0;
		neut_het=0;
				for (hetm in pos_het){
			hetmutation= indm_uniq[indm_uniq.position == hetm];
			sele = hetmutation.selectionCoeff;
			if (min(sele) <=-0.1){
				vStrDel_het =vStrDel_het+ 1 ;
			}
			if (min(sele)<=-0.01){
				strDel_het =strDel_het+ 1 ;
			}
			if (min(sele) <=-0.001 & min(sele) > -0.01){
				modDel_het =modDel_het+ 1 ;
			}
			if (min(sele) <=-0.00001 & min(sele) > -0.001){
				wkDel_het =wkDel_het + 1 ;
			}
			if (min(sele) ==0){
				neut_het=neut_het+1;
			}
		}
		Num_vStrDel_muts_het = c(Num_vStrDel_muts_het,vStrDel_het);
		vStrDel_hom = sum(s<=-0.1)-vStrDel_het;
		Num_vStrDel_muts_hom= c(Num_vStrDel_muts_hom,vStrDel_hom);
		Num_StrDel_muts_het = c(Num_StrDel_muts_het,strDel_het);
		StrDel_hom = sum(s<=-0.01)-strDel_het;
		Num_StrDel_muts_hom= c(Num_StrDel_muts_hom,StrDel_hom);
		Num_modDel_muts_het = c(Num_modDel_muts_het,modDel_het);
		modDel_hom = sum(s<=-0.001 & s > -0.01)-modDel_het;
		Num_modDel_muts_hom= c(Num_modDel_muts_hom,modDel_hom);
		Num_wkDel_muts_het = c(Num_wkDel_muts_het,wkDel_het);
		wkDel_hom = sum(s<=-0.00001 & s > -0.001)-wkDel_het;
		Num_wkDel_muts_hom= c(Num_wkDel_muts_hom,wkDel_hom);
		Num_neut_muts_het = c(Num_neut_muts_het,neut_het);
		neut_hom = sum(s==0.0)-neut_het;
		Num_neut_muts_hom= c(Num_neut_muts_hom,neut_hom);
		startpos = c(0, pos_het); //adds 0 to beggining of vector of hets
		endpos = c(pos_het, sim.chromosome.lastPosition); //adds last position in genome to vector of hets
		pos_het_diff = endpos - startpos;


                //sum for ROHs > 10Mb
                ROH_startpos_10Mb = startpos[pos_het_diff > 10000000]; //filter out startpos that dont correspond to ROH > 10Mb
                ROH_endpos_10Mb = endpos[pos_het_diff > 10000000];
                ROH_length_10Mb = pos_het_diff[pos_het_diff > 10000000]; //vector of ROHs for each individual
                ROH_length_sum_10Mb = sum(ROH_length_10Mb);
                ROH_length_sumPerInd_10Mb = c(ROH_length_sumPerInd_10Mb, ROH_length_sum_10Mb); // add sum of ROHs for each individual to vector of ROHs for all individuals
		
		//sum for ROHs > 1Mb
		ROH_startpos_1Mb = startpos[pos_het_diff > 1000000]; //filter out startpos that dont correspond to ROH > 1Mb
		ROH_endpos_1Mb = endpos[pos_het_diff > 1000000];
		ROH_length_1Mb = pos_het_diff[pos_het_diff > 1000000]; //vector of ROHs for each individual	
		ROH_length_sum_1Mb = sum(ROH_length_1Mb);
		ROH_length_sumPerInd_1Mb = c(ROH_length_sumPerInd_1Mb, ROH_length_sum_1Mb); // add sum of ROHs for each individual to vector of ROHs for all individuals
		
		//sum for ROHs > 500kb
		ROH_startpos_500Kb = startpos[pos_het_diff > 500000]; //filter out startpos that dont correspond to ROH > 500 Kb
		ROH_endpos_500Kb = endpos[pos_het_diff > 500000];
		ROH_length_500Kb = pos_het_diff[pos_het_diff > 500000]; //vector of ROHs for each individual	
		ROH_length_sum_500Kb = sum(ROH_length_500Kb);
		ROH_length_sumPerInd_500Kb = c(ROH_length_sumPerInd_500Kb, ROH_length_sum_500Kb); // add sum of ROHs for each individual to vector of ROHs for all individuals


                //sum for ROHs > 100kb
                ROH_startpos_100Kb = startpos[pos_het_diff > 100000]; //filter out startpos that dont correspond to ROH > 100 Kb
                ROH_endpos_100Kb = endpos[pos_het_diff > 100000];
                ROH_length_100Kb = pos_het_diff[pos_het_diff > 100000]; //vector of ROHs for each individual
                ROH_length_sum_100Kb = sum(ROH_length_100Kb);
                ROH_length_sumPerInd_100Kb = c(ROH_length_sumPerInd_100Kb, ROH_length_sum_100Kb); // add sum of ROHs for each individual to vector of ROHs for all individuals
		
		//calculate 2B (inbreeding load)
		del_muts = c(individual.genomes.mutationsOfType(m1),individual.genomes.mutationsOfType(m2),individual.genomes.mutationsOfType(m3),individual.genomes.mutationsOfType(m4),individual.genomes.mutationsOfType(m5));
		B_ind = c();
		
		if (del_muts.length()>0) {
			for(m in del_muts){
				//check if mut is heterozygous
				if(individual.genomes.mutationCountsInGenomes(m)==1){
					
					//protect against case where s < -1 (can happen with gamma DFE)
					s = max(m.selectionCoeff,-1.0);
					//difference in fitness between het and hom is s*(h-1) (1+sh -(1+s))
					B_ind = c(B_ind, s*(m.mutationType.dominanceCoeff-1));
					//catn(m.id + "," +  m.selectionCoeff + "," + m.selectionCoeff*(m.mutationType.dominanceCoeff-1));
				}
			}

			if(isNULL(B_ind)){
				B_pop = c(B_pop, 0.0);
			}
			// this is summed rather than multiplied
			//even if fitness is multiplicative
			else{
				B_pop = c(B_pop, sum(B_ind));
			}

		}
	
	}
	
	return(mean(pop.cachedFitness(NULL)) + "," + mean(ind_het) + "," + mean(B_pop) + "," + mean(ROH_length_sumPerInd_100Kb)/seqLength + "," +  mean(ROH_length_sumPerInd_500Kb)/seqLength + "," + mean(ROH_length_sumPerInd_1Mb)/seqLength + "," + mean(ROH_length_sumPerInd_10Mb)/seqLength + "," + mean(Num_vStrDel_muts) + "," + mean(Num_strDel_muts)+ "," + mean(Num_modDel_muts) + "," + mean(Num_wkDel_muts) + "," + mean(Num_neut_muts) +","+mean(Num_vStrDel_muts_het) +","+mean(Num_vStrDel_muts_hom) +","+mean(Num_StrDel_muts_het) +","+mean(Num_StrDel_muts_hom) +","+mean(Num_modDel_muts_het) +","+mean(Num_modDel_muts_hom) +","+mean(Num_wkDel_muts_het) +","+mean(Num_wkDel_muts_hom) +","+mean(Num_neut_muts_het) +","+mean(Num_neut_muts_hom));
}